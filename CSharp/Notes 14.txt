Auto properties

C# 6.0 

public class Employee{
public string name {get;}
public float salary{get;}
}

public Employee()
{
  name= "Tim";
  salary = 50000;
}

* Literal Movements : enhanced reading options of data
* Dictionary Initializers 
* Local Functions : If we want to execute some piece of code many times within a method, then we can make use of local functions
- Local functions can be called anytime within the Parent/enclosing function only
- They cannot be overloaded
- The cannot have access modifiers
- Compiler will raise a warning if the local functions are not called by the parent function
- All variables of the enclosing scope(parent function) can be accessed by the local function

* Throws Expression : ease of use
*Expression bodied members : is a feature that simplifies syntactic expression in programming. Similar like lambda expressions
*Nullable type : Nullable<T> : generic structure that allows primitive/value types to have nulls
  null conditional Operator : (?.) is a simpler way of checking null objects. It is a cleaner and concise code where it removes extra null usage

*Exception Filters : Allow us to specify a conditional clause for eavh catch block. Instead of a catch block handling all exceptions, we can write a catch on certain condition being true
*Nameof operator : is used to produce the name of a variable,method,type or any member as a string constant
      Names of different code artifacts are returned by the nameof operator

*externAlias : is helpful


*tuples : if we want a method to return many values , we can use tuples

 different ways to return more than one value from a method
   1. By using custom datatype    : eg : public Employee getEmployee()
					{
       						Employee e = new Employee(){Id=1,Name="AAA",Sal=5666};
						return e;}
  2. by using 'out' keyword:
  3. using dynamic datatype
