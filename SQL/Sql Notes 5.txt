Error Handling within Procedure
SQL allows simple error handlers with begin try and begin catch blocks
- we can raise and throw specific user defined errors
- All predefined errors Nos are below 50000, and user defined are above 50000. Error number is a unique identifier for each error that occurs

Error Message:  Is a brief info. describing the error that occurred recently. It can be for a maximum of 2047 characters

Severity Level : It tells us the importance of the error. This ranges between 0 and 24
  0-9 : not severe , and is considered as status messages/information
  11-16 : Indicates user generated errors
  17-19 : Indicates Software errors and cannot be corrected by the user. Must be reported to the sysadmin
  20-24 : Indicate fatal errors that can damage the database/system. Here the database connection immediately terminates to ensure database security

State : It is an arbitrary value not very important to the user. This ranges between 0 and 127


Functions : are reusable piece of code that is a part of the database schema
-All functions must return a scalar datatype
-cannot return text, ntext, image, timestamp, cursor
-May or may not take inputs

they are of 2 types
  1. scalar
  2. tabled valued
       - inline table valued : are functions that return a table and are not enclosed within begin and end keywords
                - used in where and join clause also apart from select
                - gives better performance than multi statement table valued functions
       - multi statement table valued 
                - can define the table structure as per the need.
                - contains begin and end clauses

If any given task can be achieved thru inline, then prefer inline


Difference between procedures and functions
1. A function must return a value, where as procedure need not (only if we need an integer value to be returned, we may use it)
2. Procedures can have both input, output parameters, where as functions can have only input parameters
3. Procedures can have select, and other dml statements, but functions can have only select statements. Cannot be used for data modification
4. Procedures provides options for transaction management, error handling etc. where as functions does not
5. We call a procedure using execute/exec/procedure name whereas a function can be called using select
6. Procedures can call other procedures and functions, where as functions can call only other functions
7. UDF can be used in select, where, join/having SQL clause, but procedures cannot be used




Indexes : are mechanism to sort the physical order of the data in the database

Why Index?? : Without indexes, any query or modification causes the SQL engine to search the referenced table/s from the top down. A single well placed index can shorten the query/modification from dozens of minutes to under a second
- Speeds up the data access
- Enforces Uniqueness

disadvantages :

- consumes disk space

  There are 2 types of Indexes
1. Clustered Index
            - sorts the physical table on every dml operation
            - there can be only one clustered index per table
            - it will be just unique and clustered without primary key (allows one null)

2. Non Clustered Index
            - we can have as many non clustered index as that of the columns in  the table
                 (we need to use it appropriately- whenever we have large data, and we are going to regularly query on a particular column/s, then having an index on those col/s makes sense, and can help improve performance)
            - creates a separate index table where is the data is sorted
            - it occupies space
            - any dml manipulations does not effect the table, instead the index table
            - they can be either unique or non-unique

3. Filtered Index 
            - Is a non clustered index with a predicate. 
            - Used in situations where we need only a portion of the index

Guidelines for Indexing :  
 - Columns to index :
     Primary key and foreign key
     Those frequently searched in ranges
     Those frequently accessed in sorted order
     Those frequently grouped together during aggregation

-Columns not to Index on
     Those that are seldom referred in queries
     Those that contain few unique value
     Those that are defined with text, ntext, image etc datatypes

Guidelines for Non clustered Index
   Columns that contain large number of distinct values
   Frequently Searched
   Where joins ang groups are used extensively


Type of Internal indexes
   Btree - OLTP applications
   bitmap - datawarehouses
   domain - user defined datatypes

When to create indexes
   - columns that contain number of null values
   - when table is large and most queries are expected to retrieve less than 2 to 4% of rows

When not to create :
   when table is small
   columns not referred often
   more than 4% of rows are retrieved on queries
   
