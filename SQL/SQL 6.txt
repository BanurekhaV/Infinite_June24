use infinitedb

select * from tblemployees

--Transactions
--1. 
begin transaction
select * from tblemployees where empname='banurekha'
 update tblemployees set remarks='Active'
 where empname='Banurekha'
 select * from tblemployees where empname='banurekha'
 
 commit

 --2. 
 begin tran
 insert into tblemployees values(160,'Ritesh','Male',6500,2,563486,null)  -- this has to happen
 save tran t1 
 select * from tblemployees
 delete from tblemployees where empid=200
 select * from tblemployees where empid=200
 save tran t2
  update tbldepartment set budget=50000 where deptno=2
 select * from tblDepartment
 rollback tran t2
 --rollback tran t1
 --rollback
 commit tran t2 -- or rollback
 commit tran t1  -- only one commit is allowed


 select * from tblDepartment
 select * from tblemployees


 --procedure with exception handling,transactions,tsql and few dml operations
 create table Products
 (ProductId int primary key,
 Productname varchar(30) not null,
 Price int,
 QuantityAvailable int)

 --let us populate data into products

 insert into Products values(101,'Laptops',55000,100),
 (102,'Desktops',35000,50),(103,'Tablets',60000,45),(104,'SmartPhones',45000,25)

 drop table productsales
 --product sales table
 create table ProductSales 
 (SaleId int primary key,
 ProductId int references Products(ProductId),
 QuantitySold int)

  select * from Products
 select * from ProductSales
 select max(saleid) from ProductSales

 create or alter proc Sales
 @pid int, @qty_to_sell int
 as
 begin
  --first we need to check if there is enough stock available to sell
  declare @stockavailable int
  select @stockavailable = Quantityavailable from Products where ProductId = @pid
  --we need to throw an error if the stock i sless than the qty to sell
  if(@stockavailable < @qty_to_sell)
    begin
	  raiserror('Not Enough Stock on hand to sell',16,1)
	end
  else
    begin -- we shall start a transaction
	begin tran
	-- we need to update the qty available in products table and also insert one rsale record
	-- in productsales table
	update Products
	set QuantityAvailable = (QuantityAvailable - @qty_to_sell)
	where ProductId = @pid

	-- now let us insert one row into productsales
	-- inorder not to have pk violetion, we should not hard code ant data for sale id
	--we can write a logic that autogenerates the saleid, by finding the max saleid
	declare @maxsaleid int
	select @maxsaleid = case
	   when max(SaleId) is null then 0
	   else max(SaleId)
	   end
	   from ProductSales
	   -- we will increment the @maxsaleid by 1, to avoid Pk violation
	    set @maxsaleid = @maxsaleid + 1

	   insert into ProductSales values(@maxsaleid, @pid, @qty_to_sell)
	   --@@Error , a global variable will have 0 if no errors
	   if(@@Error <> 0)
	    begin
		  rollback transaction
		  Print 'something went wrong.. try later, rolling back'
        end
	   else
	    begin
		  commit transaction
		  Print 'Transaction Successfull'
		end
  end
end

--let us execute the above proc
Sales 101,10



--Triggers
--1.
create trigger trgEmpIns
on tblemployees
for insert
as
 begin
  select * from inserted
  select * from tblemployees
end

insert into tblemployees values(300,'Tanmayee','Female',6700,1,998800,null)

--2.
create or alter trigger trgUpdEmp
on tblemployees
for update
as
begin
select * from deleted
select remarks from inserted
declare @status varchar(20)
select @status=remarks from inserted
if(@status='active')
 begin
 print 'Employee is active'
 end
end

update tblemployees set remarks ='active' where empid=150

--3.
create trigger trg_Nochanges
on tbldepartment
for insert,update,delete
as
begin
 print ' cannot manipulate table'
 rollback
 end

 select * from tblDepartment
 insert into tblDepartment values(100,'aa',567,'l1')

 update tblDepartment set loc='Cochin' where deptno=20

 drop trigger trg_nochanges

create table Employee_Audit(Msg varchar(max))

 create or alter trigger trgAuditInsert
 on tblemployees
 for insert
 as
 begin
 declare @id int
 select @id=empid from inserted

 insert into Employee_Audit
 values('New Employee with Empid '+ ' '+ cast(@id as varchar(5)) + ' is added at '
 + cast(getdate() as nvarchar(20)))
 end

 insert into tblemployees values(200,'Banurekha','Female',6500,4,007,null)

 select * from employee_audit


 --let us add a column to the Employee_audit table
 alter table employee_audit
 add AuditDate date
 -- eg 5. to make an elaborate audit details using the columns from
 --both inserted and deleted table

 create or alter trigger trgUpdateEmp
 on tblemployees
 for update
 as
 begin
   --declare few variables to hold old data
   declare @id int
   declare @oldename varchar(35), @newename varchar(35)
   declare @oldsalary float, @newsalary float
   declare @olddeptid int, @newdeptid int
   select * from inserted
   select * from deleted
   --declare a variable to build the audit string
   declare @auditdata varchar(max)
   --store the newly updated data into a temp table ('#') or use the inserted table
   select * into #temtableforupdation from inserted

   --loop thru all the updated records incase we have updated many rows
   while(exists(select empid from #temtableforupdation))
     begin
	  set @auditdata = ' '
	  --let us select the first row of temporary table
	  select top 1 @id=empid,@newename=empname,
	  @newsalary=salary,@newdeptid=deptno from #temtableforupdation

	  --let us select data from deleted table
	  select @oldename=empname, @oldsalary=salary,
	  @olddeptid=deptno from deleted where empid=@id

	  set @auditdata = 'Employee with Id : '+ cast(@id as varchar(5)) + ' changed '
	  --if old data is updated with newdata, we should track it
	  if(@oldename <> @newename)
	   begin
	   set @auditdata = @auditdata + 'the Name from '+ @oldename + ' to '+ @newename
	   end
	   --salary changes verfification
	   if(@oldsalary <> @newsalary)
	    begin
		set @auditdata = @auditdata + ' Salary from ' + cast(@oldsalary as varchar(10)) + 
		' to ' + cast(@newsalary as varchar(10))
		end
		--dept changes verification
		if(@olddeptid <> @newdeptid)
		begin
		set @auditdata = @auditdata + ' Department from  '+ cast(@olddeptid as varchar(5)) +
		' to ' + cast(@newdeptid as varchar(5))
		end

		--now we have the entire audit data
		insert into Employee_Audit(msg,auditdate) values(@auditdata,getdate())

		  --now we should delete the top 1st row after recording changes
		  --so that the second row can be the top row
		  delete from #temtableforupdation where empid=@id
	end
end

select * from tblemployees where DeptNo in(1,2)
--one row and many columns updation
update tblemployees set empname='Sumathi',salary=7500,deptno=5 where empid=200

select * from #temtableforupdation

--many rows updation
update tblemployees set salary=8000 where deptno in(1,3)
select * from Employee_audit